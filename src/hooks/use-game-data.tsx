import { useState, useEffect } from 'react'

export interface Game {
  id: number
  title: string
  description: string
  type: '2D' | '3D'
  category: string
  rating: number
  plays: string
  locked: boolean
  tags?: string[]
  imageUrl?: string
}

export function useGameData() {
  const [games, setGames] = useState<Game[]>([
    {
      id: 1,
      title: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –®—É—Ç–µ—Ä 2D',
      description: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞ —Å –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π',
      type: '2D',
      category: '–≠–∫—à–µ–Ω',
      rating: 4.8,
      plays: '2.1M',
      locked: false,
      tags: ['–∫–æ—Å–º–æ—Å', '—à—É—Ç–µ—Ä', '–ø–∏–∫—Å–µ–ª–∏']
    },
    {
      id: 2,
      title: '–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç –ö–ª–æ–Ω 3D',
      description: '–°–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–π –º–∏—Ä –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π',
      type: '3D',
      category: '–ü–µ—Å–æ—á–Ω–∏—Ü–∞',
      rating: 4.9,
      plays: '5.3M',
      locked: false,
      tags: ['–ø–µ—Å–æ—á–Ω–∏—Ü–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '3d']
    },
    {
      id: 3,
      title: '–¢–µ—Ç—Ä–∏—Å –†–µ–≤–æ–ª—é—Ü–∏—è',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º',
      type: '2D',
      category: '–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
      rating: 4.7,
      plays: '8.2M',
      locked: false,
      tags: ['–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞', '–∫–ª–∞—Å—Å–∏–∫–∞', '—Ç–µ—Ç—Ä–∏—Å']
    },
    {
      id: 4,
      title: '–ì–æ–Ω–∫–∏ –±–µ–∑ –ì—Ä–∞–Ω–∏—Ü 3D',
      description: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥–æ–Ω–∫–∏ –Ω–∞ —Å—É–ø–µ—Ä–∫–∞—Ä–∞—Ö',
      type: '3D',
      category: '–ì–æ–Ω–∫–∏',
      rating: 4.6,
      plays: '3.7M',
      locked: false,
      tags: ['–≥–æ–Ω–∫–∏', '–º–∞—à–∏–Ω—ã', '3d']
    },
    {
      id: 5,
      title: 'üîí Neon Runner VIP',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –Ω–µ–æ–Ω–æ–≤—ã–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ñ–∏–∑–∏–∫–æ–π',
      type: '2D',
      category: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä',
      rating: 4.9,
      plays: '1.2M',
      locked: true,
      tags: ['–Ω–µ–æ–Ω', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ—Ä', 'vip']
    },
    {
      id: 6,
      title: 'üîí Cyber Wars Premium',
      description: '–ü—Ä–µ–º–∏—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª–µ',
      type: '2D',
      category: '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
      rating: 4.8,
      plays: '950K',
      locked: true,
      tags: ['–∫–∏–±–µ—Ä–ø–∞–Ω–∫', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', 'premium']
    },
    {
      id: 7,
      title: 'üîí Neon City Racing',
      description: 'VIP –≥–æ–Ω–∫–∏ –ø–æ –Ω–µ–æ–Ω–æ–≤–æ–º—É –º–µ–≥–∞–ø–æ–ª–∏—Å—É',
      type: '2D',
      category: '–ì–æ–Ω–∫–∏',
      rating: 4.7,
      plays: '1.8M',
      locked: true,
      tags: ['–Ω–µ–æ–Ω', '–≥–æ–Ω–∫–∏', '–≥–æ—Ä–æ–¥']
    },
    {
      id: 8,
      title: 'üîí Retro Arcade Master',
      description: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ—Ç—Ä–æ –∏–≥—Ä 80-—Ö –≥–æ–¥–æ–≤',
      type: '2D',
      category: '–†–µ—Ç—Ä–æ',
      rating: 4.9,
      plays: '2.5M',
      locked: true,
      tags: ['—Ä–µ—Ç—Ä–æ', '80–µ', '–∞—Ä–∫–∞–¥–∞']
    },
    {
      id: 9,
      title: 'üîí 8-Bit Adventures',
      description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ 8-–±–∏—Ç–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
      type: '2D',
      category: 'RPG',
      rating: 4.6,
      plays: '1.1M',
      locked: true,
      tags: ['8bit', 'rpg', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è']
    }
  ])

  const [unlockedGames, setUnlockedGames] = useState<number[]>([])

  const unlockGames = (gameIds: number[]) => {
    setUnlockedGames(prev => [...new Set([...prev, ...gameIds])])
  }

  const isGameUnlocked = (gameId: number) => {
    const game = games.find(g => g.id === gameId)
    return !game?.locked || unlockedGames.includes(gameId)
  }

  const getGamesByCategory = (category: string) => {
    if (category === 'all') return games
    return games.filter(game => game.category.toLowerCase() === category.toLowerCase())
  }

  const searchGames = (query: string) => {
    if (!query.trim()) return games
    const searchTerm = query.toLowerCase()
    return games.filter(game => 
      game.title.toLowerCase().includes(searchTerm) ||
      game.description.toLowerCase().includes(searchTerm) ||
      game.category.toLowerCase().includes(searchTerm) ||
      game.tags?.some(tag => tag.toLowerCase().includes(searchTerm))
    )
  }

  return {
    games,
    unlockedGames,
    unlockGames,
    isGameUnlocked,
    getGamesByCategory,
    searchGames
  }
}